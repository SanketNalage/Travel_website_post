pipeline {
    agent { label 'rohan' }
    environment {
        SONAR_HOME = tool 'Sonar'
    }
    stages {
        stage('Code Cloning From GitHub') {
            steps {
                git url: 'https://github.com/SanketNalage/Travel_website_post.git', branch: 'main'
            }
        }

        stage('SonarQube Quality Analysis') {
            steps {
                withSonarQubeEnv('Sonar-rohan') { // Must match SonarQube Server name in Jenkins
                    sh """
                        $SONAR_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=wanderlust \
                        -Dsonar.projectName=wanderlust \
                        -Dsonar.sources=.
                    """
                }
            }
        }

        stage('Sonar Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: false
                }
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'owasp'
                dependencyCheckPublisher pattern: '**/dependency-check-report.html'
            }
        }

        stage('Trivy File Scan') {
            steps {
                sh '''
                   trivy fs --format json -o trivy-fs-report.json .
                '''
            }
        }

        stage('Docker Deploy Project') {
            steps {
                sh '''
                    docker compose up -d
                '''
            }
        }
    }
    post {
        always {
            echo 'Pipeline execution finished!'
            archiveArtifacts artifacts: '**/*.html,**/*.json', allowEmptyArchive: true
        }
    }
}
